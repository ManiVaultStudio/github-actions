name: "Common cmake steps"
description: "Encapsulate cmake composite run steps that are common for Windows, Linux and Mac"
# reference https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-composite-run-steps-action
inputs:
  arch:
    description: "x86_64 the architecture. (TBD support arm on Windows) "
    required: true
  build_type:
    description: "Debug, Release, RelWithDebInfo also used for the runtime_type"
    required: true
  build_runtime:
    description: "dynamic or static - usually dynamic i.e. MD"
    required: true
  compiler:
    description: "msvc (TBD will add clang at some point on windows)"
    required: true
  build_cppstd:
    description: "14 17 20 23 The C++ feature support version used."
    required: true
  build_cversion:
    description: "192 193 194 A three digit _MSC_VER version - e.g "
    required: true
  conan_user:
    description: "pass secrets.LKEB_ARTIFACTORY_USER"
    required: true
  conan_password:
    description: "pass secrets.LKEB_ARTIFACTORY_PASSWORD"
    required: true
  conan_pem:
    description: "pass secrets.LKEB_CERT_CHAIN"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install conan & build configuration
      run: |
        pip install conan
        pip install gitpython
        pip install git+ssh://git@github.com/ManiVaultStudio/rulessupport.git@master
        pip install jinja2-cli

        # Fish the package name from the conanfile.py
        $conaninfo = conan inspect . -f json
        $conaninfo = $conaninfo | ConvertFrom-Json
        Write-Host "Completed setup for:" $conaninfo.name
      shell: pwsh
      env:
        CONAN_PEM: ${{ inputs.conan_pem }}

    - name: Get conan config
      uses: actions/checkout@v4
      with:
        ref: v2
        repository: ManiVaultStudio/github-actions
        path: conan_config

    - name: Validate directory contents
      run: |
        echo $PWD
        dir .
        echo 'Validate conan_config'
        dir ./conan_config
        echo 'Validate /conan_config/config_dir'
        dir ./conan_config/config_dir
      shell: pwsh

    - name: Validate lower directory contents
      run: |
        echo 'Validate ./conan_config/config_dir/profiles'
        dir ./conan_config/config_dir/profiles
      shell: pwsh

    - name: Setup conan config profile from inputs using jinja template
      run: |
        $source = (Get-Location).Path + '/conan_config/config_dir/profile_win.j2'
        $destination = (Get-Location).Path + '/conan_config/config_dir/profiles/profile_win'
        jinja2 $source `
          -D arch=${{ inputs.arch }} `
          -D build_type=${{ inputs.build_type }} `
          -D build_runtime=${{ inputs.build_runtime }} `
          -D build_runtime_type=${{ inputs.build_type }} `
          -D compiler=${{ inputs.compiler }} `
          -D build_cppstd=${{ inputs.build_cppstd }} `
          -D build_cversion=${{ inputs.build_cversion }} `
          -D os=${{ inputs.os }} > $destination `
      shell: pwsh

    - name: Install conan config, authorize user and build
      run: |
        $env:CONAN_CMAKE_PROGRAM = (Get-Command cmake).Path
        $env:CONAN_USER_HOME = (Get-Location).Path + "\_conan"
        $env:VS170COMNTOOLS = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools"
        $env.CONAN_LOGIN_USERNAME = ${{ inputs.conan_user }}
        $env.CONAN_PASSWORD = ${{ inputs.conan_password }}
        conan config install (Get-Location).Path + '/conan_config/config_dir'
        conan profile show -pr profile_win
        conan remote auth lkebartifactory2

        mkdir _build
        if exist .\external\conan-recipes conan export ./external/conan-recipes/bundle_package bundleutils/0.1@lkeb/stable
        conan create . lkeb/stable  -pr:b=profile_win -pr:h=profile_win
      shell: pwsh
      env:
        BUILD_SHARED: True
        CONAN_UPLOAD: https://www.lkebartifactory.nl/artifactory/api/conan/conan-local-v2
        CONAN_LKEB_ARTIFACTORY: lkebartifactory2

    - name: Upload to artifactory with conan
      run: |
        $env.CONAN_LOGIN_USERNAME = ${{ inputs.conan_user }}
        $env.CONAN_PASSWORD = ${{ inputs.conan_password }}
        conan remote auth lkebartifactory2
        $env:CONAN_USER_HOME = (Get-Location).Path + '\_conan'
        $conaninfo = conan inspect . -f json
        $conaninfo = $conaninfo | ConvertFrom-Json
        $package_name = $conaninfo.name
        $package_ref = $package_name + '/*'
        echo "Uploading $package_ref  to the Artifactory"
        conan upload --all --force --confirm -r $Env:CONAN_LKEB_ARTIFACTORY $package_ref
      shell: pwsh
      env:
        CONAN_LKEB_ARTIFACTORY: lkebartifactory2
