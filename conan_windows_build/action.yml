name: "Common cmake steps"
description: "Encapsulate cmake composite run steps that are common for Windows, Linux and Mac"
# reference https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-composite-run-steps-action
inputs:
  arch:
    description: "x86_64 the architecture. (TBD support arm on Windows) "
    required: true
  build_type:
    description: |
      "Debug, Release, RelWithDebInfo also used for the runtime_type

      If the is a single type a single conan create (including packaging is performed) is performed.

      Otherwise a comma separated list of build types must be provided e.g.:
      'Release,Debug'. 

      When a list is supplied a series of conan builds will take place 
      for each build_type followed by a single packaging step which
      will place all build outputs into a single artifactory package with
      several build_type sub directories. 

      This supports repos where single build_type packages are retrieved from
      conancenter.

      In both cases the conanfile should be written to support this"
    required: true
  build_runtime:
    description: "dynamic or static - usually dynamic i.e. MD"
    required: true
  compiler:
    description: "msvc (TBD will add clang at some point on windows)"
    required: true
  build_cppstd:
    description: "14 17 20 23 The C++ feature support version used."
    required: true
  build_cversion:
    description: "192 193 194 A three digit _MSC_VER version - e.g "
    required: true
  conan_user:
    description: "pass secrets.LKEB_ARC2_UPLOAD_USER"
    required: true
  conan_password:
    description: "pass secrets.LKEB_ARC2_UPLOAD_PASSWORD"
    required: true
  conan_pem:
    description: "pass secrets.LKEB_CERT_CHAIN"
    required: true
  multi_build_types:
    description: |

    default: ""
    required: false

runs:
  using: "composite"
  steps:
    - name: Check build type
      id: check_build_type
      run: |
        $build_type = "${{ inputs.build_type }}"
        $check_list = $build_type.Split(',')
        if ($check_list.Length -eq 1) { "multi_build=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append}
        elseif ($check_list.Length -gt 1) { "multi_build=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append}
        else {
          Write-Host "Invalid build_type input"
          exit 1
        }
        $first = $check_list[0]
        "default_build_type=$first" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh

    - name: Install conan & build configuration
      run: |
        pip install conan
        pip install gitpython
        pip install git+ssh://git@github.com/ManiVaultStudio/rulessupport.git@master
        pip install jinja2-cli

        # Fish the package name from the conanfile.py
        $conaninfo = conan inspect . -f json
        $conaninfo = $conaninfo | ConvertFrom-Json
        Write-Host "Completed setup for:" $conaninfo.name
        Write-Host "Inputs: - ${{ inputs.arch }} - ${{ inputs.build_type }} - ${{ inputs.build_runtime }} - ${{ inputs.compiler }} - ${{ inputs.build_cppstd }} - ${{ inputs.build_cversion }}"

      shell: pwsh
      env:
        CONAN_PEM: ${{ inputs.conan_pem }}

    - name: Get conan config
      uses: actions/checkout@v4
      with:
        ref: v2
        repository: ManiVaultStudio/github-actions
        path: conan_config

    # Make the profile - the build type is the first in the list
    # if multiple build types are used
    - name: Setup conan config profile from inputs using jinja template
      run: |
        $source = (Get-Location).Path + '/conan_config/config_dir/profile_win.j2'
        $destination = (Get-Location).Path + '/conan_config/config_dir/profiles/default'
        jinja2 `
          -D arch=${{ inputs.arch }} `
          -D build_type=${{ steps.check_build_type.outputs.default_build_type }} `
          -D build_cppstd=${{ inputs.build_cppstd }} `
          -D build_runtime=${{ inputs.build_runtime }} `
          -D build_runtime_type=${{ steps.check_build_type.outputs.default_build_type }} `
          -D compiler=${{ inputs.compiler }} `
          -D build_cversion=${{ inputs.build_cversion }} `
          -D os=Windows `
          -D shared=True $source > $destination
        $destdir = (Get-Location).Path + '/conan_config/config_dir/profiles'
        dir $destdir
      shell: pwsh

    - name: Install conan config, authorize user and single conan build build
      if: steps.check_build_type.outputs.multi_build == 'false'
      run: |
        Write-Host "Running multi build setting: " + "${{ steps.check_build_type.outputs.multi_build }}"
        $env:CONAN_CMAKE_PROGRAM = (Get-Command cmake).Path
        $env:CONAN_USER_HOME = (Get-Location).Path + "\_conan"
        $env:VS170COMNTOOLS = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools"
        $destination = (Get-Location).Path + '/conan_config/config_dir/profiles/default'
        type $destination
        $configdir = (Get-Location).Path + '/conan_config/config_dir'
        conan config install $configdir
        conan profile show -pr default
        conan remote auth lkebartifactory2

        mkdir _build
        if (Test-Path -path ".\external\conan-recipes") {
          conan export ./external/conan-recipes/bundle_package bundleutils/0.1@lkeb/stable
        }
        conan create . --user lkeb --channel stable  -pr:b=default -pr:h=default
      shell: pwsh
      env:
        BUILD_SHARED: True
        CONAN_UPLOAD: https://www.lkebartifactory.nl/artifactory/api/conan/conan-local-v2
        CONAN_LKEB_ARTIFACTORY: lkebartifactory2
        CONAN_LOGIN_USERNAME: ${{ inputs.conan_user }}
        CONAN_PASSWORD: ${{ inputs.conan_password}}

    - name: Install conan config, authorize user and single conan build build
      if: steps.check_build_type.outputs.multi_build == 'true'
      run: |
        Write-Host "Running multi build setting: " + "${{ steps.check_build_type.outputs.multi_build }}"
        $env:CONAN_CMAKE_PROGRAM = (Get-Command cmake).Path
        $env:CONAN_USER_HOME = (Get-Location).Path + "\_conan"
        $env:VS170COMNTOOLS = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools"
        $destination = (Get-Location).Path + '/conan_config/config_dir/profiles/default'
        type $destination
        $configdir = (Get-Location).Path + '/conan_config/config_dir'
        conan config install $configdir
        conan profile show -pr default
        conan remote auth lkebartifactory2

        mkdir _build
        if (Test-Path -path ".\external\conan-recipes") {
          conan export ./external/conan-recipes/bundle_package bundleutils/0.1@lkeb/stable
        }

        $build_type = "${{ inputs.build_type }}"
        $build_list = $build_type.Split(',')

        foreach ($build_type in $build_list) {
          conan build . -pr:b=default -pr:h=default -s build_type=$build_type --build=missing
        }

        $conaninfo = conan inspect . -f json
        $conaninfo = $conaninfo | ConvertFrom-Json
        $package_name = $conaninfo.name
        $package_version = $conaninfo.version

        foreach ($build_type in $build_list) {
          conan export-pkg . --name=$package_name --version=$package_version --user lkeb --channel stable -s build_type=$build_type
        }

      shell: pwsh
      env:
        BUILD_SHARED: True
        CONAN_UPLOAD: https://www.lkebartifactory.nl/artifactory/api/conan/conan-local-v2
        CONAN_LKEB_ARTIFACTORY: lkebartifactory2
        CONAN_LOGIN_USERNAME: ${{ inputs.conan_user }}
        CONAN_PASSWORD: ${{ inputs.conan_password}}

    - name: Upload to artifactory with conan
      run: |
        conan remote auth lkebartifactory2
        $env:CONAN_USER_HOME = (Get-Location).Path + '\_conan'
        $conaninfo = conan inspect . -f json
        $conaninfo = $conaninfo | ConvertFrom-Json
        $package_name = $conaninfo.name
        $package_ref = $package_name + '/*'
        echo "Uploading $package_ref  to the Artifactory"
        conan upload --force --confirm -r $Env:CONAN_LKEB_ARTIFACTORY $package_ref
      shell: pwsh
      env:
        CONAN_LKEB_ARTIFACTORY: lkebartifactory2
        CONAN_LOGIN_USERNAME: ${{ inputs.conan_user }}
        CONAN_PASSWORD: ${{ inputs.conan_password}}
