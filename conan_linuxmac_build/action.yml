name: "Common cmake steps"
description: "Encapsulate cmake composite run steps that are common for Linux and Mac"
# reference https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-composite-run-steps-action
inputs:
  conan-compiler:
    description: "gcc apple-clang"
    required: true
  conan-cc:
    description: "gcc clang"
    required: true
  conan-cxx:
    description: "g++ clang++"
    required: true
  conan-compiler-version:
    description: "A number [gcc: 8 9 10 11 12 14] [clang: 39 40 50 60 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [10.0]"
    required: true
  conan-libcxx-version:
    description: "Linux: libstdc++ or Macos: libc++ "
    required: true
  conan-build-type:
    description: "Debug or Release"
    required: true
  conan-build-os:
    description: "Linux or Macos"
    required: true
  conan-user:
    description: "pass secrets.LKEB_ARTIFACTORY_USER"
    required: true
  conan-password:
    description: "pass secrets.LKEB_ARTIFACTORY_PASSWORD"
    required: true
  conan-pem:
    description: "pass secrets.LKEB_CERT_CHAIN"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install conan & build configuration
      run: |
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
          sudo apt-get install ninja-build
          sudo apt-get install libtbb-dev
        fi

        if [[ "$OSTYPE" == "darwin"* ]]; then
          brew install libomp
          export HOMEBREW_NO_AUTO_UPDATE=1
        fidarwin
        
        pip install conan~=1.66.0
        pip install gitpython
        pip install -v git+ssh://git@github.com/ManiVaultStudio/rulessupport.git@master

        export CONAN_CMAKE_PROGRAM=`which cmake`
        echo CMake version:
        cmake --version
        mkdir `pwd`/_conan
        export CONAN_USER_HOME=`pwd`/_conan
        conan user

        echo Extend conan cacert.pem
        conanhome=`conan config home`
        echo -e "$CONAN_PEM" >> $conanhome/cacert.pem

      shell: bash
      env:
        CONAN_PEM: ${{ inputs.conan-pem }}

    - name: Setup conan
      run: |
        export CONAN_USER_HOME=`pwd`/_conan
        echo Add LKEB artifactory as remote
        conan remote add $CONAN_LKEB_ARTIFACTORY $CONAN_UPLOAD
        echo Add upload user
        conan user -r $CONAN_LKEB_ARTIFACTORY -p ${{ inputs.conan-password }} ${{ inputs.conan-user }}
      shell: bash
      env:
        BUILD_SHARED: True
        CONAN_UPLOAD: https://lkeb-artifactory.lumc.nl/artifactory/api/conan/conan-local
        CONAN_LKEB_ARTIFACTORY: lkeb-artifactory

    - name: Get compatibility logic
      uses: actions/checkout@v4
      with:
        repository: ManiVaultStudio/github-actions
        ref: compatibility
        path: github-actions
        fetch-depth: 1

# Continue on error is to suppress grep 
# exit code when compatibility is not present
    - name: Make compatibility profile (if needed) 
      continue-on-error: true
      run: |
        export CONAN_USER_HOME=`pwd`/_conan
        python github-actions/python/get_compatibility_list.py ${{ inputs.conan-build-os }} ${{ inputs.conan-compiler }} ${{ inputs.conan-compiler-version }}
        compatibility_found=`conan profile list | (grep -E 'compatibility' || true)`
        echo "compatibility_found=$compatibility_found" >> $GITHUB_ENV
      shell: bash

    - name: Setup profiles 
      run: |   
        export CONAN_USER_HOME=`pwd`/_conan
        export CONAN_PACKAGE_NAME=`conan inspect --raw name conanfile.py`
        conan profile new action_build
        conan profile update settings.os=${{ inputs.conan-build-os }} action_build
        conan profile update settings.os_build=${{ inputs.conan-build-os }} action_build
        conan profile update settings.arch=x86_64 action_build
        conan profile update settings.arch_build=x86_64 action_build
        conan profile update settings.compiler=${{ inputs.conan-compiler }} action_build
        conan profile update settings.compiler.version=${{ inputs.conan-compiler-version }} action_build
        conan profile update settings.compiler.libcxx=${{ inputs.conan-libcxx-version}} action_build
        conan profile update settings.build_type=${{ inputs.conan-build-type }} action_build
        conan profile update options.shared=True action_build
        conan profile show action_build

        mkdir _build

      shell: bash
      env:
        BUILD_SHARED: True
        CC: ${{inputs.conan-cc}}
        CXX: ${{inputs.conan-cxx}}

    - name: Build & upload to artifactory with conan
      run: |
        export CONAN_USER_HOME=`pwd`/_conan
        if [ -d "./external/conan-recipes" ]; then conan export ./external/conan-recipes/bundle_package bundleutils/0.1@lkeb/stable; fi
        
        if [[ $compatibility_found == compatibility ]]; then
          echo "Configuration for profile compatibility"
          cat `conan config home`/profiles/compatibility
          conan create . lkeb/stable  -pr:b=action_build -pr:h=action_build -pr compatibility
        else
          conan create . lkeb/stable  -pr:b=action_build -pr:h=action_build
        fi
        echo "Display package recipes"
        conan search $CONAN_PACKAGE_NAME
        export CONAN_PACKAGE_NAME=`conan inspect --raw name conanfile.py`
        export CONAN_PACKAGE_VERSION=`conan inspect --raw version conanfile.py`
        echo "About to upload $CONAN_PACKAGE_NAME/$CONAN_PACKAGE_VERSION to $CONAN_LKEB_ARTIFACTORY"
        conan upload --all --force --confirm -r $CONAN_LKEB_ARTIFACTORY $CONAN_PACKAGE_NAME/*

      shell: bash
      env:
        CONAN_LKEB_ARTIFACTORY: lkeb-artifactory
