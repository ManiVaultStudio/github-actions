name: "Common cmake steps"
description: "Encapsulate cmake composite run steps that are common for Windows, Linux and Mac"
# reference https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-composite-run-steps-action
inputs:
  conan-visual-version:
    description: "MSVC version: 16, 17 represent msvc-2019 and msvc-2022"
    required: true
  conan-visual-runtime:
    description: "MD or MDd"
    required: true
  conan-build-type:
    description: "Debug or Release"
    required: true
  conan-user:
    description: "pass secrets.LKEB_ARTIFACTORY_USER"
    required: true
  conan-password:
    description: "pass secrets.LKEB_ARTIFACTORY_PASSWORD"
    required: true
  conan-pem:
    description: "pass secrets.LKEB_CERT_CHAIN"
    required: true
  rs_ssh_key:
    description: "pass secrets.RULESSUPPORT_DEPLOY_KEY"
    required: true
  sentry-url:
    description: "pass secrets.LKEB_SENTRY_URL"
    required: true
  sentry-org:
    description: "pass secrets.LKEB_SENTRY_ORG"
    required: true
  sentry-project:
    description: "pass secrets.LKEB_SENTRY_PROJECT"
    required: true
  sentry-auth-token:
    description: "pass secrets.LKEB_SENTRY_AUTH_TOKEN"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install conan & build configuration
      run: |
        pip install conan~=1.66.0
        pip install gitpython
        pip install git+ssh://git@github.com/ManiVaultStudio/rulessupport.git@master

        REM Fish the package name from the conanfile.py
        conan inspect -j __props__.json -a name conanfile.py
        for /f "delims=" %%a in ('powershell -Command "foreach ($Line in (Get-Content -Raw __props__.json | ConvertFrom-Json)) { Write-Host $Line.Name}"') do set PACKAGE_NAME=%%a

        echo CMake version:
        cmake --version
        set CONAN_USER_HOME=%cd%\_conan
        mkdir %CONAN_USER_HOME%
        conan user

        echo Extend conan cacert.pem
        for /f "delims=" %%i in ('conan config home') do set CONANPEMHOME=%%i
        SETLOCAL EnableDelayedExpansion
        echo !CONAN_PEM! >> %CONANPEMHOME%\cacert.pem
        ENDLOCAL

        REM Fish the package name from the conanfile.py
        for /f "delims=" %%i in ('conan inspect --raw name conanfile.py') do set CONAN_PACKAGE_NAME=%%i
        echo "Completed setup for package: %CONAN_PACKAGE_NAME%"

      shell: cmd
      env:
        CONAN_PEM: ${{ inputs.conan-pem }}

    - name: Build with conan
      run: |
        for /f "delims=" %%i in ('where cmake') do set CONAN_CMAKE_PROGRAM="%%i"
        set CONAN_USER_HOME=%cd%\_conan
        set VS170COMNTOOLS="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools"

        echo Add LKEB artifactory as remote at URL: %CONAN_UPLOAD%
        conan remote add %CONAN_LKEB_ARTIFACTORY% %CONAN_UPLOAD%
        echo Add upload user
        conan user -r %CONAN_LKEB_ARTIFACTORY% -p ${{ inputs.conan-password }} ${{ inputs.conan-user }}
        conan profile new action_build
        conan profile update settings.os=Windows action_build
        conan profile update settings.os_build=Windows action_build
        conan profile update settings.arch=x86_64 action_build
        conan profile update settings.compiler="Visual Studio" action_build
        conan profile update settings.compiler.runtime=${{ inputs.conan-visual-runtime }} action_build
        conan profile update settings.compiler.version=${{ inputs.conan-visual-version }} action_build
        conan profile update settings.build_type=${{ inputs.conan-build-type }} action_build
        conan profile update options.:shared=%BUILD_SHARED% action_build
        conan profile show action_build

        mkdir _build
        if exist .\external\conan-recipes conan export ./external/conan-recipes/bundle_package bundleutils/0.1@lkeb/stable
        conan create . lkeb/stable  -pr:b=action_build -pr:h=action_build

      shell: cmd
      env:
        BUILD_SHARED: True
        CONAN_UPLOAD: https://lkeb-artifactory.lumc.nl/artifactory/api/conan/conan-local
        CONAN_LKEB_ARTIFACTORY: lkeb-artifactory

    - name: Install sentry-cli
      if: startsWith(github.ref, 'refs/heads/release/')
      shell: bash
      run: |
        set -euo pipefail
        curl -sSfL https://sentry.io/get-cli/ | bash
    
        # Add whichever install location exists to PATH for subsequent steps
        if [ -x "/usr/local/bin/sentry-cli" ]; then
          echo "/usr/local/bin" >> "$GITHUB_PATH"
        fi
        if [ -x "$HOME/.sentry-cli/bin/sentry-cli" ]; then
          echo "$HOME/.sentry-cli/bin" >> "$GITHUB_PATH"
        fi
    
    - name: Verify
      if: startsWith(github.ref, 'refs/heads/release/')
      shell: bash
      run: |
        which sentry-cli || true
        sentry-cli --version

    # Find newest package/<pkg_id> dir
    - name: Find Conan package folder (latest)
      id: conan_pkgdir
      shell: pwsh
      run: |
        $cache = Join-Path $env:GITHUB_WORKSPACE '_conan\.conan\data'
        $pkgDir = Get-ChildItem $cache -Recurse -Directory -Filter package `
          | ForEach-Object { Get-ChildItem $_.FullName -Directory } `
          | Sort-Object LastWriteTime -Descending `
          | Select-Object -First 1
        if (-not $pkgDir) { throw "No Conan package dir found under $cache" }
        $unix = $pkgDir.FullName -replace '\\','/'
        "PKG_DIR=$unix" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
    
    - name: Upload PDBs (and binaries)
      shell: bash
      env:
        RELEASE_NAME: ${{ github.ref_name }}     # raw branch/tag, may contain slashes
        SENTRY_URL: ${{ inputs.LKEB_SENTRY_URL }}
        SENTRY_ORG: ${{ inputs.LKEB_SENTRY_ORG }}
        SENTRY_PROJECT: ${{ inputs.LKEB_SENTRY_PROJECT }}
        SENTRY_AUTH_TOKEN: ${{ inputs.LKEB_SENTRY_AUTH_TOKEN }}
        PKG_DIR: ${{ steps.conan_pkgdir.outputs.PKG_DIR }}
      run: |
        set -euo pipefail
        shopt -s globstar nullglob
    
        # sanitize release: replace slashes/whitespace with dashes
        RELEASE_SAFE="${RELEASE_NAME//\//-}"
        RELEASE_SAFE="${RELEASE_SAFE//[[:space:]]/-}"
        echo "Release (sanitized): $RELEASE_SAFE"
    
        # Convert Windows drive path if needed
        posix() { sed -E 's|^([A-Za-z]):/|/\L\1/|' <<<"$1"; }
        POSIX_PKG_DIR="$(posix "$PKG_DIR")"
    
        PDBS=( "$POSIX_PKG_DIR"/**/*.pdb )
        BINARIES=( "$POSIX_PKG_DIR"/**/*.exe "$POSIX_PKG_DIR"/**/*.dll )
    
        if (( ${#PDBS[@]} )); then
          sentry-cli --url "$SENTRY_URL" debug-files upload --include-sources -t pdb "${PDBS[@]}"
        else
          echo "No PDBs found in $POSIX_PKG_DIR"; exit 1
        fi
    
        if (( ${#BINARIES[@]} )); then
          sentry-cli --url "$SENTRY_URL" debug-files upload "${BINARIES[@]}"
        fi
    


        
    - name: Upload to artifactory with conan
      run: |
        $env:CONAN_USER_HOME = (Get-Location).tostring() + '\_conan'
        $package_name = (conan inspect --raw name conanfile.py)
        $package_ref = $package_name + '/*'
        echo "Uploading $package_ref  to the Artifactory"
        conan upload --all --force --confirm -r $Env:CONAN_LKEB_ARTIFACTORY $package_ref

      shell: pwsh
      env:
        CONAN_LKEB_ARTIFACTORY: lkeb-artifactory
